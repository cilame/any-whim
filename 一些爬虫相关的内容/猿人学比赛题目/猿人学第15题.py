import pywasm
import io, base64
b64bytes = b'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ZGVidWdfYWJicmV2AREBJQ4TBQMOEBcbDhEBEgYAAAIuAREBEgYDDjoLOwsnGUkTPxkAAAMFAAIYAw46CzsLSRMAAAQ0AAIYAw46CzsLSRMAAAULAREBEgYAAAYkAAMOPgsLCwAAAADCBgsuZGVidWdfbGluZTIDAAAEADcAAAABAQH7Dg0AAQEBAQAAAAEAAAEvdG1wL2J1aWxkX21wOTNvazd0ejhiLiQAAGZpbGUuYwABAAAAAAUCBgAAABUFCgoCMRN1dXV1dXUFDXYGA3N0BREDDYIFEnQFBeQDc5AFDQYDDnQFDwZ0BQ3kBQ8GrQYDcQiCBQ0GAxGCBQ8GdAUN5AUPBq0GA24IggUNBgMUggUPBnQFDeQFDwatBgNrCIIFDQYDF4IFDwZ0BQ3kBQ8GrQYDaAiCBQ0GAxqCBRUGdAUN5AUVBq0GA2UIggUNBgMdggUVBnQFDeQFFQatBgNiCIIFEgYDIboFFAZ0BRCsBRQGdQUYBnQFFnQFH3QFHnQFJKwFInQFG3QFEHQGdQUVCIMFGQZ0BRd0BR90BSV0BSR0BSKsBRx0BSt0BRCsBRMGCEwFGQZ0BRd0BR50BRx0BRF0BnUFFAiDBRkGdAUWdAUhdAUsdAUqdAUjdAUedAURdAUNBnUFFQZ0BQ3kBRUGrQYDVgiCBQ0GAyyCBRUGdAUN5AUVBq0GA1MI1gURBgMw1gUTCNcFGAaCBR2CBRyCBRrkBRWeBRGeBQ0GgwUSBoIFF4IFFoIFFOQFD54FC54FDwaDBRMGggURggUangUZggUf5AUdggUWngULngUQBoMFFQaCBRKCBR2eBSiCBSaCBR+eBRqeBQ2eBoQFEQaCBQ0IWAURBtcGA0kI1gUNBgM5kAURBoIFDQhYBREG1wYDRgjWBRAGAzzkBRUGggUSggUdngUoggUmggUfngUangUNngaDBREGggUNCFgFEQbXBgNCCNYFDQYDwACQBREGggUNCFgFEQbXBgO/fwjWBQ4GA8MAkAUTBoIFGIIFF4IFFeQFEJ4FDJ4FEwaDBRwGggUaggUmngUkggUwngUuggU6ngU4ggVEngVCggVIngVGggVMngVKggUQngUNBoMFFAaCBQ0IWAUUBtcGA7p/CNYFDQYDyACQBRQGggUNCFgFFAbXBgO3fwjWBRcGAw0gBQUGCNYuBQ4GA8AALgUXBoIFFYIFHp4FI+QFIYIFLZ4FK4IFN54FNYIFO54FOYIFPZ4FBeQCBQABAQCuAQouZGVidWdfc3RyY2xhbmcgdmVyc2lvbiA4LjAuMCAodHJ1bmsgMzQxOTYwKQAvdG1wL2J1aWxkX21wOTNvazd0ejhiLiQvZmlsZS5jAC90bXAvYnVpbGRfbXA5M29rN3R6OGIuJABlbmNvZGUAbG9uZyBpbnQAYwBkAGtleQB2aQByZXN1bHQAbWlkZGxlAG1pZGRsZTIAbWlkZGxlMwBtaWRkbGU0AGkAaW50AAAjBG5hbWUBHAIAEV9fd2FzbV9jYWxsX2N0b3JzAQZlbmNvZGU='
wasmbytes = base64.b64decode(b64bytes)
f = io.BytesIO(wasmbytes)
v = pywasm.Runtime(pywasm.binary.Module.from_reader(f), None, None)
def get_x0(x1, x2):
    return v.exec("encode", (x1, x2))

import time
import random
def get_m():
    x1 = int(int(time.time()*1000)/1000/2)
    x2 = int(int(time.time()*1000)/1000/2-int(random.random()*50+1))
    x0 = get_x0(x1, x2)
    return '|'.join(map(str,[x0, x1, x2]))

import re
import json
import requests
def get_info(page):
    def mk_url_headers(page):
        url = (
            'http://match.yuanrenxue.com/api/match/15'
            '?m={}'
            '&page={}'
        ).format(get_m(), page)
        headers = {
            "Accept": "application/json, text/javascript, */*; q=0.01",
            "Accept-Encoding": "gzip, deflate", # auto delete br encoding. cos requests and scrapy can not decode it.
            "Accept-Language": "zh-CN,zh;q=0.9",
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "Host": "match.yuanrenxue.com",
            "Pragma": "no-cache",
            "Referer": "http://match.yuanrenxue.com/match/15",
            "User-Agent": "yuanrenxue.project",
            "X-Requested-With": "XMLHttpRequest"
        }
        return url,headers
    url,headers = mk_url_headers(page)
    s = requests.get(url,headers=headers)
    return json.loads(s.text)

allvalues = []
for page in range(1,6):
    jsondata = get_info(page)
    values = [i.get("value") for i in jsondata['data']]
    allvalues.extend(values)
    print('page:{} --> values:{}'.format(page, values))

print('sum:{}'.format(sum(allvalues)))

# 正常执行结果
# page:1 --> values:[2086, 9613, 8563, 9659, 7656, 4363, 8892, 3371, 1335, 3312]
# page:2 --> values:[8992, 678, 3708, 8387, 2657, 1345, 9763, 800, 4328, 104]
# page:3 --> values:[2795, 2594, 9150, 6656, 5834, 476, 1968, 1218, 5901, 1851]
# page:4 --> values:[1317, 6556, 2163, 1628, 930, 2919, 9012, 8671, 1232, 4586]
# page:5 --> values:[492, 7595, 3262, 9299, 7287, 4316, 3091, 1926, 2803, 2248]
# sum:219388