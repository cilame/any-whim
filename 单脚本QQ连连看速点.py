# 图片zip压缩文件，这里通过一定的算法压缩成了字符串方便直接用一个脚本直接使用。
zstring = (
'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'
)
import base64, zlib
zstring = base64.b64decode(zstring)
zstring = zlib.decompress(zstring,-15)

import os
import tempfile
def extractall(self, path=None, members=None, pwd=None):
    # 解决解压中文异常的问题
    if members is None: members = self.namelist()
    path = os.getcwd() if path is None else os.fspath(path)
    for zipinfo in members:
        try:    _zipinfo = zipinfo.encode('cp437').decode('gbk')
        except: _zipinfo = zipinfo.encode('utf-8').decode('utf-8')
        if _zipinfo.endswith('/') or _zipinfo.endswith('\\'):
            myp = os.path.join(path, _zipinfo)
            if not os.path.isdir(myp):
                os.makedirs(myp)
        else:
            myp = os.path.join(path, _zipinfo)
            youp = os.path.join(path, zipinfo)
            self.extract(zipinfo, path)
            os.rename(youp, myp)
import zipfile
zipfile.ZipFile.extractall = extractall
temppath = tempfile.mkdtemp()
zipfilename = os.path.join(temppath, '_pic.zip')
with open(zipfilename, 'wb') as f:
    f.write(zstring)
f = zipfile.ZipFile(zipfilename, 'r')
f.extractall(temppath)
f.close()
picpath = os.path.join(temppath, '_pic')
import shutil
from atexit import register
def clear_temppath():
    shutil.rmtree(temppath)
register(clear_temppath) # 让程序在结束时删除临时文件夹

















# QQ连连看算法实现，直接运行该脚本即可快速实现连点
# 注意，该脚本运用的是截图获取算法，使用时候不要遮盖到连连看的窗口，否则会出现算法错误
# 使用时需要安装 opencv ，该库依赖 numpy 本身也挺大的，所以安装时候最好添加一个国内的源进行安装
# pip install opencv-contrib-python -i https://pypi.douban.com/simple/

# 连连看算法
import random
import numpy as np
def get_cross(s_map,point,target):
    h0,w0 = point
    h,w = s_map.shape
    ret,packer = [],[]
    for i in target:
        if i.lower() in ('left','l'):
            p = np.where(s_map[h0,:w0]!=0)[0]
            if len(p):
                k = p.max() + 1
                packer.append((h0, k-1))
            else:
                k = 0
        if i.lower() in ('right','r'):
            p = np.where(s_map[h0,w0:]!=0)[0]
            if len(p):
                k = p.min() + w0 - 1
                packer.append((h0, k+1))
            else:
                k = w - 1
        if i.lower() in ('up','u'):
            p = np.where(s_map[:h0,w0]!=0)[0]
            if len(p):
                k = p.max() + 1
                packer.append((k-1, w0))
            else:
                k = 0
        if i.lower() in ('down','d'):
            p = np.where(s_map[h0:,w0]!=0)[0]
            if len(p):
                k = p.min() + h0 - 1
                packer.append((k+1, w0))
            else:
                k = h - 1
        ret.append(k)
    return ret,packer
def get_fish(s_map,point,target='rd'):
    pack = []
    assert target in ['rd','lr','ud'] # random, left-right, up-down
    if target=='rd':
        target = np.random.choice(('lr','ud'))
    if target=='lr':
        (l,r),packer = get_cross(s_map,point,('l','r'))
        pack += packer
        for i in range(l,r+1):
            pt = (point[0],i)
            _,packer = get_cross(s_map,pt,('u','d'))
            pack += packer
        return pack
    if target=='ud':
        (u,d),packer = get_cross(s_map,point,('u','d'))
        pack += packer
        for i in range(u,d+1):
            pt = (i,point[1])
            _,packer = get_cross(s_map,pt,('l','r'))
            pack += packer
        return pack
def get_class_point(s_map,fishpoint):
    dc = dict()
    for i in fishpoint:
        key = s_map[i]
        if not dc.get(key):
            dc[s_map[i]] = [i]
        else:
            dc[s_map[i]] += [i]
    return dc
def pick_dc_all(dc):
    pts = []
    for i in dc:
        for _ in range(int(len(dc[i])/2)):
            pts.append((dc[i].pop(),dc[i].pop()))
    return pts
def get_1point_results(s_map,point):
    fish = get_fish(s_map,point)
    dc   = get_class_point(s_map,fish)
    pts  = pick_dc_all(dc)
    return pts
def get_close(s_map):
    chain = []
    h,w = s_map.shape
    for i in range(h):
        for j in range(w-1):
            a,b = s_map[(i,j)],s_map[(i,j+1)]
            if a!=0 and b!=0 and a==b:
                s_map[(i,j)],s_map[(i,j+1)] = 0,0
                chain.append(((i,j),(i,j+1)))
    for i in range(w):
        for j in range(h-1):
            a,b = s_map[(j,i)],s_map[(j+1,i)]
            if a!=0 and b!=0 and a==b:
                s_map[(j,i)],s_map[(j+1,i)] = 0,0
                chain.append(((j,i),(j+1,i)))
    return chain
# 直接获取该 s_map 的全解链。
def get_chain(s_map):
    s_map = s_map.copy()
    chain = get_close(s_map)
    cur_flash = (s_map.ravel()!=0).tolist().count(True)
    over_break = 0
    while np.any(s_map!=0):
        zpoints = list(zip(*map(lambda i:i.tolist(),np.where(s_map==0))))
        point = random.choice(zpoints)
        result = get_1point_results(s_map,point)
        for idx1,idx2 in result:
            chain.append((idx1,idx2))
            s_map[idx1],s_map[idx2] = 0,0
        next_flash = (s_map.ravel()!=0).tolist().count(True)
        # 连连看存在无解情况，所以以下就是返回在 s_map 完全无解之前
        # 算法能找到的所有有解链 chain
        if cur_flash != next_flash:
            cur_flash = next_flash
            over_break = 0
            continue
        else:
            if over_break > 100:
                break
            over_break += 1
    return chain












import zlib
import ctypes
from struct import pack, calcsize, unpack
GetWindowDC             = ctypes.windll.user32.GetWindowDC
GetSystemMetrics        = ctypes.windll.user32.GetSystemMetrics
SelectObject            = ctypes.windll.gdi32.SelectObject
DeleteObject            = ctypes.windll.gdi32.DeleteObject
BitBlt                  = ctypes.windll.gdi32.BitBlt
GetDIBits               = ctypes.windll.gdi32.GetDIBits
CreateCompatibleDC      = ctypes.windll.gdi32.CreateCompatibleDC
CreateCompatibleBitmap  = ctypes.windll.gdi32.CreateCompatibleBitmap

def screenshot(shape:'left,top,width,height'=None):
    def png_bit(data, size, level=6):
        width, height = size
        line = width * 3
        png_filter = pack(">B", 0)
        scanlines = b"".join(
            [png_filter + data[y * line : y * line + line] for y in range(height)][::-1]
        )
        magic = pack(">8B", 137, 80, 78, 71, 13, 10, 26, 10)
        ihdr = [b"", b"IHDR", b"", b""]
        ihdr[2] = pack(">2I5B", width, height, 8, 2, 0, 0, 0)
        ihdr[3] = pack(">I", zlib.crc32(b"".join(ihdr[1:3])) & 0xFFFFFFFF)
        ihdr[0] = pack(">I", len(ihdr[2]))
        idat = [b"", b"IDAT", zlib.compress(scanlines, level), b""]
        idat[3] = pack(">I", zlib.crc32(b"".join(idat[1:3])) & 0xFFFFFFFF)
        idat[0] = pack(">I", len(idat[2]))
        iend = [b"", b"IEND", b"", b""]
        iend[3] = pack(">I", zlib.crc32(iend[1]) & 0xFFFFFFFF)
        iend[0] = pack(">I", len(iend[2]))
        return magic + b"".join(ihdr + idat + iend)

    left, top, width, height = shape if shape else (0, 0, GetSystemMetrics(0), GetSystemMetrics(1))
    bmi      = pack('LHHHH', calcsize('LHHHH'), width, height, 1, 32)
    srcdc    = GetWindowDC(0)
    memdc    = CreateCompatibleDC(srcdc)
    svbmp    = CreateCompatibleBitmap(srcdc, width, height)
    SelectObject(memdc, svbmp); BitBlt(memdc, 0, 0, width, height, srcdc, left, top, 13369376)
    _data    = ctypes.create_string_buffer(height * width * 4)
    got_bits = GetDIBits(memdc, svbmp, 0, height, _data, bmi, 0)
    DeleteObject(memdc)
    data = bytes(_data)
    rgb = bytearray(width * height * 3)
    rgb[0::3],rgb[1::3],rgb[2::3] = data[2::4],data[1::4],data[0::4]
    size = (width, height)
    return png_bit(rgb, size) # 全屏截图 png bit 数据


import io, os
import cv2
import numpy as np
import tempfile
import ctypes
def get_window_abs_by_name(name, show=False):
    try:
        fd, filename = tempfile.mkstemp()
        os.close(fd)
        screenshot_bit = screenshot()
        with io.open(filename, 'wb') as f:
            f.write(screenshot_bit)
        screen = cv2.imdecode(np.fromfile(filename, dtype=np.uint8), -1) # 兼容中文路径的文件
    finally:
        os.remove(filename)
    class RECT(ctypes.Structure):  
        _fields_ = [('left', ctypes.c_int),  
                    ('top', ctypes.c_int),  
                    ('right', ctypes.c_int),  
                    ('bottom', ctypes.c_int)]  
    rect = RECT()
    mhd = ctypes.windll.User32.FindWindowW(None,name)
    ctypes.windll.user32.GetWindowRect(mhd, ctypes.byref(rect))
    if rect.top == rect.bottom == rect.left == rect.right == 0:
        raise 'cant get windows'
    img = screen[rect.top:rect.bottom,rect.left:rect.right]
    b,g,r = map(lambda i:i[...,None],[img[...,0],img[...,1],img[...,2]])
    npimg = np.concatenate((r,g,b),axis=-1)[181:566,14:603]
    if show:
        cv2.imshow('123',npimg)
        cv2.waitKey()
        cv2.destroyAllWindows()
    return rect.top, rect.left, npimg

class gridcut:
    def __init__(self, mat, h, w):
        assert float(h)==int(h) ,float(w)==int(w)
        self._mat = mat
        self._omh, self._omw = mat.shape[:2]
        self._h,  self._w  = int(h), int(w)
        self._gridh = int(round(float(self._omh)/self._h))
        self._gridw = int(round(float(self._omw)/self._w))
        self.lr_shape = self._creat_lrshape()
    def _creat_lrshape(self):
        hy,wx = np.mgrid[:self._h, :self._w]
        lhy = (hy * self._gridh)[...,None]
        lwx = (wx * self._gridw)[...,None]
        rhy = ((hy + 1) * self._gridh)[...,None]
        rwx = ((wx + 1) * self._gridw)[...,None]
        lr_shape = np.concatenate((lhy,lwx,rhy,rwx),axis=-1)
        return lr_shape
    def get_picmat_by_point(self, y, x):
        ly,lx,ry,rx = self.lr_shape[y, x]
        return self._mat[ly:ry,lx:rx]
    def get_point(self, p, top, left):
        x1,y1,x2,y2 = self.lr_shape[p[0],p[1]]
        return int((y1+y2)/2+left+14), int((x1+x2)/2+top+181)

import os
class predictor:
    def __init__(self, imagepath='_pic'):
        pics = os.listdir(imagepath)
        self.maps = {}
        for idx, img in enumerate(pics):
            image = os.path.join(imagepath, img)
            image = cv2.imdecode(np.fromfile(image, dtype=np.uint8), -1)
            self.maps[idx] = {}
            self.maps[idx]['img'] = img
            self.maps[idx]['npi'] = image[...,::-1]
    def predict(self, npimg):
        pred = {}
        for idx in self.maps:
            pred[np.sum(self.maps[idx]['npi'] - npimg)] = idx
        predidx = pred[min(pred)]
        return predidx, self.maps[predidx]['img']

import numpy as np
def get_pred_s_map(gridh,gridw,cuter,preder):
    s_map = np.zeros((gridh,gridw))
    for i in range(gridh):
        for j in range(gridw):
            predidx, predname = preder.predict(cuter.get_picmat_by_point(i, j))
            s_map[i,j] = predidx
    return s_map.astype(int)

import ctypes
def click(pos):
    # 一直处于点击状态，保留当前的坐标信息，感觉意义不大，有时候还会造成点击失效的问题
    # class POINT(ctypes.Structure):
    #     _fields_ = [("x", ctypes.c_long), ("y", ctypes.c_long)]    
    # def get_curr_pos():
    #     pos = POINT()
    #     ctypes.windll.user32.GetCursorPos(ctypes.byref(pos))
    #     return pos.x, pos.y
    # cpos = get_curr_pos()
    ctypes.windll.user32.SetCursorPos(*pos)
    ctypes.windll.user32.mouse_event(2,0,0,0,0)
    ctypes.windll.user32.mouse_event(4,0,0,0,0)
    # ctypes.windll.user32.SetCursorPos(*cpos)


window_name = 'QQ游戏 - 连连看角色版'
# 通过标题获取游戏窗口以及坐标
top, left, npimg = get_window_abs_by_name(window_name)
h, w = 11, 19
cuter  = gridcut(npimg, h, w)
preder = predictor(picpath)
smap   = get_pred_s_map(h, w, cuter, preder)
chain  = get_chain(smap)

# 一个功能，注册快捷键回调，让你按下ESC就能控制某些运行时的参数，方便快捷键跳出程序循环
import ctypes
import ctypes.wintypes
import threading
import traceback
user32 = ctypes.windll.user32
class HotkeyHooker:
    EXIT = False
    regdict = {}
    combins = set()
    tempids = list(range(1000))
    EXIT_ID = 1000
    def run(self):
        for tid in self.regdict:
            if not user32.RegisterHotKey(None, tid, self.regdict[tid]['combine'], self.regdict[tid]['key']):
                print("rebind register id", self.regdict[tid]['key'])
                user32.UnregisterHotKey(None, self.regdict[tid]['key'])
        try:  
            msg = ctypes.wintypes.MSG()
            while True:
                for modkey in self.combins:
                    if user32.GetMessageA(ctypes.byref(msg), None, modkey, 0) != 0:
                        if msg.message == 786: # WM_HOTKEY
                            if msg.wParam in self.regdict:
                                try:
                                    self.regdict[msg.wParam]['callback']()
                                except:
                                    traceback.print_exc()
                                if msg.wParam == self.EXIT_ID:
                                    return
                        user32.TranslateMessage(ctypes.byref(msg))
                        user32.DispatchMessageA(ctypes.byref(msg))
        finally:
            for key in self.regdict:
                user32.UnregisterHotKey(None, key)
    def start(self, ensure_exit=True):
        if ensure_exit:
            if self.EXIT_ID not in self.regdict:
                raise KeyError('exit callback not included, pls use "HotkeyHooker.regexit" func reg it.')
        threading.Thread(target=self.run).start()
    def regexit(self, key, callback=lambda:None, combine=0):
        self.combins.add(combine)
        self.regdict[self.EXIT_ID] = { 'key': key, 'callback': callback, 'combine': combine }

toggle = {'esc': False}
hotkey = HotkeyHooker()
hotkey.regexit(27, lambda: toggle.update({'esc': True})) # 注册快捷键回调
hotkey.start()

print(smap)
import ctypes
for cpoc in chain:
    pa, pb = cpoc
    c1 = cuter.get_point(pa, top, left)
    c2 = cuter.get_point(pb, top, left)
    click(c1)
    click(c2)
    import time; time.sleep(1)
    if toggle['esc']: # 按下ESC键自动停止程序，防止出问题
    	print('press esc. break loop. exit.')
    	break