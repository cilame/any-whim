import zlib
import base64
import itertools

zpasslist = (
    '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'
    'h/R/'
)

def map_pass_leet(string, mode='hard'):
    def create_leet(string, mode='hard'):
        '''
        这里即便是 hard 模式也没有使用遍历处理方式，
        因为那样对数据的膨胀过大，所以这里暂时就选择了一个更加折中的办法进行处理
        '''
        easy = dict(
            A = ['4'],
            B = ['8'],
            C = [],
            D = [],
            E = ['3'],
            F = [],
            G = ['6'],
            H = [],
            I = [],
            J = [],
            K = [],
            L = ['1'],
            M = [],
            N = [],
            O = ['0'],
            P = [],
            Q = [],
            R = ['2'],
            S = ['5'],
            T = ['7'],
            U = ['v'],
            V = [],
            W = [],
            X = [],
            Y = [],
            Z = ['2'],
        )
        hard = dict(
            A = ['4', '@'],
            B = ['8'],
            C = ['('],
            D = [')'],
            E = ['3'],
            F = [],
            G = ['6'],
            H = ['#'],
            I = [],
            J = [],
            K = [],
            L = ['1', '|'],
            M = [],
            N = [],
            O = ['0'],
            P = ['9'],
            Q = ['&'],
            R = ['2'],
            S = ['5', '$'],
            T = [],
            U = ['v'],
            V = [],
            W = [],
            X = [],
            Y = [],
            Z = ['2', '%'],
        )
        if mode == 'easy': _mode = easy
        if mode == 'hard': _mode = hard
        rr = [[]]
        r = []
        q = []
        for i in string:
            if i.upper() in _mode and i.upper() not in q and _mode[i.upper()]:
                q.append(i.upper())
                r.append([i.upper(), _mode[i.upper()][0]])
        for l in range(1, len(r)+1):
            for i in itertools.combinations(r,l):
                rr.append(i)
        e = []
        q = []
        if ('A' in string.upper() or \
            'L' in string.upper() or \
            'S' in string.upper()) and \
            mode == 'hard':
            for i in string:
                if i.upper() in _mode and i.upper() not in q and _mode[i.upper()]:
                    q.append(i.upper())
                    e.append([i.upper(), _mode[i.upper()][-1]])
        for l in range(1, len(e)+1):
            for i in itertools.combinations(e, l):
                if any([i[0].upper() in 'ALS' for i in i]):
                    rr.append(i)
        return rr
    passlist = []
    for i in create_leet(string, mode):
        s = string
        i = dict(i)
        for j in string:
            if j.upper() in i:
                s = s.replace(j, i[j.upper()])
        passlist.append(s)
    return passlist

def mk_map_passleet(passlist, lenlimit=range(0,300), mode='hard'):
    if not isinstance(lenlimit, (list, tuple, range)):
        raise TypeError('lenlimit type must be list,tuple,range')
    q = []
    l = list(lenlimit)
    for i in passlist:
        if len(i) not in l:
            continue
        for j in map_pass_leet(i, mode):
            q.append(j)
    return q







# 普通单字母 + 常见中文名拼音简写
zh_name_heads = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 
    'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    'cb',  'cbo', 'cc',  'cf',  'cg',  'cgl', 'cgy', 'ch',  'cj',  'cjh', 'cl',  'cli', 'cm',  'cp',  'cq',  
    'ct',  'cw',  'cx',  'cxk', 'cxl', 'cxy', 'cxz', 'cy',  'cyl', 'cyy', 'gf',  'hm',  'hw',  'hxy', 'hy',  'lb',  
    'lbo', 'lc',  'lcm', 'ld',  'ldd', 'ldm', 'lf',  'lfy', 'lg',  'lgf', 'lgh', 'lgl', 'lgr', 'lgx', 'lgy', 
    'lgz', 'lh',  'lhm', 'lhx', 'lhy', 'lj',  'ljg', 'ljh', 'ljj', 'lk',  'll',  
    'lli', 'lly', 'lm',  'ln',  'lna', 'lp',  'lq',  'lr',  'ls',  'lsh', 'lsl', 'lsy', 'lsz', 'lt',  'ltt', 
    'lw',  'lx',  'lxf', 'lxh', 'lxl', 'lxm', 'lxr', 'lxy', 'lxz', 'ly',  'lyh', 'lyl', 'lym', 'lyu', 'lyy', 
    'lyz', 'lzq', 'mac', 'mal', 'mc',  'ml',  'mli', 'mxy', 'sw',  'sxy', 'wb',  'wbo', 'wc',  'wcm', 'wd',  
    'wdd', 'wdm', 'wf',  'wfl', 'wfy', 'wg',  'wgf', 'wgh', 'wgl', 'wgr', 'wgx', 'wgy', 'wgz', 'wh',  'whm', 
    'why', 'wj',  'wjf', 'wjg', 'wjh', 'wjj', 'wjp', 'wk',  'wl',  'wlh', 'wli', 'wlj', 'wll', 'wlu', 'wly', 
    'wm',  'wn',  'wna', 'wp',  'wq',  'wr',  'ws',  'wsh', 'wsl', 'wsy', 'wsz', 'wt',  'wtt', 'ww',  'wx',  
    'wxf', 'wxh', 'wxl', 'wxm', 'wxr', 'wxu', 'wxy', 'wxz', 'wy',  'wyh', 'wyl', 'wym', 'wyu', 'wyy', 'wyz', 
    'wzq', 'xj',  'xm',  'xuj', 'xum', 'xuw', 'xw',  'yb',  'ybo', 'yc',  'yf',  'ygy', 'yh',  'yj',  'yl',  
    'yli', 'ym',  'yp',  'yt',  'yw',  'yx',  'yxl', 'yxy', 'yxz', 'yy',  'zb',  'zbo', 'zc',  'zcm', 'zd',  
    'zf',  'zfy', 'zgf', 'zgl', 'zgr', 'zgy', 'zgz', 'zh',  'zhm', 'zhy', 'zj',  'zjg', 'zjh', 'zjj', 'zjl', 'zk',  
    'zl',  'zlh', 'zli', 'zlj', 'zll', 'zly', 'zm',  'zn',  'zna', 'zp',  'zq',  'zr',  'zs',  'zsl', 'zsy', 
    'zsz', 'zt',  'ztt', 'zw',  'zx',  'zxf', 'zxh', 'zxl', 'zxm', 'zxr', 'zxu', 'zxy', 'zxz', 'zy',  'zyh', 
    'zyl', 'zym', 'zyu', 'zyy', 'zyz', 'zzq',
]

# 时间遍历 # 247138 条
# 如果过滤掉 /, - 这种类型的处理，则只有 99854 条
import datetime
import itertools
gstart = datetime.datetime(1970,1,1,0,0,0)
gend   = datetime.datetime(2020,1,2,0,0,0)

def map_date(
    start   = gstart,
    end     = gend,
    ):
    def date_range(start_date,end_date):
        for n in range(int((end_date-start_date).days)):
            yield start_date+datetime.timedelta(n)
    
    q = []
    for i in date_range(start, end):
        i = (i.year, i.month, i.day)
        q.append(i)
    return q

def map_year_month_day(onlynumber=False):
    a,b,c = '%Y','%m','%d'
    fmts = ['{}{}{}',] if onlynumber == True else [
        '{}{}{}',
        '{}/{}/{}',
        '{}-{}-{}',
    ]
    q = []
    for i in map_date():
        year, month, day = i
        year  = '{:>02}'.format(year)
        month = '{:>02}'.format(month)
        day   = '{:>02}'.format(day)
        for fmt in fmts:
            q1 = fmt.format(year, month, day)
            qq = fmt.format(year[2:], month, day)
            q.append(q1)
            q.append(qq)
            if month.startswith('0') or day.startswith('0'):
                month, day = month.lstrip('0'), day.lstrip('0')
                q1 = fmt.format(year, month, day)
                qq = fmt.format(year[2:], month, day)
                q.append(q1)
                q.append(qq)
    for i in map_date():
        year, month, day = i
        year  = '{:>02}'.format(year)
        month = '{:>02}'.format(month)
        day   = '{:>02}'.format(day)
        for fmt in fmts:
            q2 = fmt.format(day, month, year)
            qq = fmt.format(day, month, year[2:])
            q.append(q2)
            q.append(qq)
            if month.startswith('0') or day.startswith('0'):
                month, day = month.lstrip('0'), day.lstrip('0')
                q2 = fmt.format(day, month, year)
                qq = fmt.format(day, month, year[2:])
                q.append(q2)
                q.append(qq)
    return sorted(set(q))

def map_year_month(onlynumber=False):
    a,b,c = '%Y','%m','%d'
    fmts = ['{}{}',] if onlynumber == True else [
        '{}{}',
        '{}/{}',
        '{}-{}',
    ]
    q = []
    for i in map_date():
        year, month, day = i
        year  = '{:>02}'.format(year)
        month = '{:>02}'.format(month)
        for fmt in fmts:
            q1 = fmt.format(year, month)
            qq = fmt.format(year[2:], month)
            q.append(q1)
            q.append(qq)
            if month.startswith('0'):
                month = month.lstrip('0')
                q1 = fmt.format(year, month)
                qq = fmt.format(year[2:], month)
                q.append(q1)
                q.append(qq)
    for i in map_date():
        year, month, day = i
        year  = '{:>02}'.format(year)
        month = '{:>02}'.format(month)
        for fmt in fmts:
            q2 = fmt.format(month, year)
            qq = fmt.format(month, year[2:])
            q.append(q2)
            q.append(qq)
            if month.startswith('0'):
                month = month.lstrip('0')
                q2 = fmt.format(month, year)
                qq = fmt.format(year[2:], month)
                q.append(q1)
                q.append(qq)
    return sorted(set(q))

def map_month_day(onlynumber=False):
    a,b,c = '%Y','%m','%d'
    fmts = ['{}{}',] if onlynumber == True else [
        '{}{}',
        '{}/{}',
        '{}-{}',
    ]
    q = []
    for i in map_date(
            start   = datetime.datetime(2020,1,1,0,0,0),
            end     = datetime.datetime(2021,1,2,0,0,0),
        ):
        year, month, day = i
        month = '{:>02}'.format(month)
        day   = '{:>02}'.format(day)
        for fmt in fmts:
            q1 = fmt.format(month, day)
            q.append(q1)
            if month.startswith('0') or day.startswith('0'):
                month = month.lstrip('0')
                day   = day.lstrip('0')
                q1 = fmt.format(month, day)
                q.append(q1)
    for i in map_date(
            start   = datetime.datetime(2020,1,1,0,0,0),
            end     = datetime.datetime(2021,1,2,0,0,0),
        ):
        year, month, day = i
        month = '{:>02}'.format(month)
        day   = '{:>02}'.format(day)
        for fmt in fmts:
            q2 = fmt.format(day, month)
            q.append(q2)
            if month.startswith('0') or day.startswith('0'):
                month = month.lstrip('0')
                day   = day.lstrip('0')
                q1 = fmt.format(day, month)
                q.append(q1)
    return sorted(set(q))

def map_namehead_times(onlynumber=True):
    # 拼音加日期组合
    a = list(map(str, range(1970, 2020)))
    b = map_year_month_day(onlynumber)
    c = map_year_month(onlynumber)
    d = map_month_day(onlynumber)
    for times in [a,b,c,d]:
        for nhead,ttime in itertools.product(zh_name_heads, times):
            yield nhead + ttime







import time
import hashlib
if __name__ == '__main__':
    # 这里解压出的 zpasslist 是从 sqlmap 中获取到的密码字典 + 自己在别处收集的一些密码
    # 大约 15000+ 条密码数据。
    # 通过 map_pass_leet 函数将每个密码的常见的黑客语的各种可能组合的映射遍历出来，让字典更具备鲁棒性
    # 经过测试发现，黑客语 easy 模式膨胀度约 15 倍，hard 模式膨胀度大约为 30 倍。在较大的字典内慎用。
    zpasslist = base64.b64decode(zpasslist.encode())
    zpasslist = zlib.decompress(zpasslist, -15).decode().splitlines()


    # 检查简单的密码字典表，有尝试使用简单的黑客语遍历一般密码的异化密码的可能
    k = 'p4ssw0rd'
    w = hashlib.md5(k.encode()).hexdigest()
    ctime = time.time()
    for i in mk_map_passleet(zpasslist):
        v = hashlib.md5(i.encode()).hexdigest()
        if v == w:
            print(v, i)
            break
    print(time.time()-ctime)


    # 通过姓名首字母拼接日期进行密码遍历，最长会花大约一分钟进行比对。
    k = 'zzq201611'
    k = 'z2018'
    w = hashlib.md5(k.encode()).hexdigest()
    ctime = time.time()
    for i in map_namehead_times():
        v = hashlib.md5(i.encode()).hexdigest()
        if v == w:
            print(v, i)
            break
    print(time.time()-ctime)